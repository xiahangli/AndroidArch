//在开发过程中，为了组件化，isModule为false,集成时，isModule=true
def isModule = false
if (isModule.toBoolean())
    apply plugin: 'com.android.library'
else
    apply plugin: 'com.android.application'

//导入constant脚本，并通过project.ext.minSdkVersion方式引入版本
apply from: '../constants.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "29.0.0"


    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //下面的配置会被打入aar,
        // aar的接入方在构建过程时会使用的混淆规则
        //
        consumerProguardFiles 'consumer-rules.pro'
        //支持分包
        multiDexEnabled true
    }

    //源码配置相关
    sourceSets {
        main {//main目录下
            if(isModule.toBoolean()){//作为组件的时候
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java{//组件形式集成，排除所有debug目录下的文件
                    exclude 'debug/**'
                }

                resources {//资源相关的配置
                }
            }else
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            //用于构建aar的混淆规则
            //aar在集成到app中的时候，proguard过程会将所有的混淆配置合在一起对所有的class进行处理
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {//兼容java8语法
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    resourcePrefix "player_"

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.lib_exoplayer_dash
    implementation rootProject.lib_exoplayer_ui
    implementation rootProject.lib_constraint_layout
    implementation rootProject.lib_exoplayer_core
    implementation rootProject.lib_exoplayer_hls
    implementation rootProject.lib_appcompat
    implementation rootProject.lib_recyclerview
    implementation rootProject.lib_glide

    testImplementation rootProject.lib_junit

    androidTestImplementation rootProject.lib_junit_ext
    androidTestImplementation rootProject.lib_espresso_core


    compileOnly 'org.checkerframework:checker-qual:' + checkerframeworkVersion

    api project(':base')
}
